#########################################
# üìÅ Remote Git Source Repo Configuration
#########################################

# URL of the source code repo for this service
REMOTE_REPO_URL=https://github.com/your-org/service-a.git

# Branch to clone from the repo
REMOTE_REPO_BRANCH=main

# Local folder to clone the repo into
REMOTE_REPO_DIR=workspace

# Path (relative to repo) to the file containing version info
SERVICE_VERSION_FILE=service_version.txt


#########################################
# üê≥ Docker Image Build Configuration
#########################################

# Docker image name (usually same as service name)
DOCKER_IMAGE_NAME=service-a

# Docker registry to push to
DOCKER_REGISTRY=yourregistry.azurecr.io

# Path to Dockerfile (can be in a shared devops repo)
DOCKERFILE_PATH=./Dockerfiles/common-war-java17-dockerfile


#########################################
# üìä SonarQube Integration (Optional)
#########################################

# Set to true to enable SonarQube scanning during build
SONAR_ENABLED=true

# SonarQube URL
SONAR_URL=http://sonar.yourdomain.com

# SonarQube auth token (use Jenkins secret/env when possible)
SONAR_TOKEN=your-sonar-token

# Branch name for SonarQube reports (e.g. dev, qa)
SONAR_BRANCH=dev


#########################################
# ‚öì Helm Chart Configuration
#########################################

# Helm OCI-compatible registry URL
HELM_REPO_URL=yourregistry.azurecr.io

# Path to the Helm chart directory
HELM_CHART_DIR=common-helm-devops/helmcharts/service-a


#########################################
# üêô GitHub Release Info
#########################################

# GitHub repo in org/repo format
GITHUB_REPO=your-org/service-a

# GitHub API token (use Jenkins credential store ideally)
GITHUB_API_WRITE_TOKEN=your-github-token

#########################################
# Usage Tips
#########################################
## Rename this file to .env per service.
## Store one .env per microservice under a services/<service-name>/ directory.
## Inject sensitive values (tokens) using Jenkins credentials where possible.