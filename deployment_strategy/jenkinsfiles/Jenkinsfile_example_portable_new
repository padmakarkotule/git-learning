pipeline {
    agent { node { label 'docker-slave' } }

    options {
        disableConcurrentBuilds()
    }

    environment {
        SERVICE_ENV_FILE = "services/${JOB_BASE_NAME}/${JOB_BASE_NAME}.env"
        GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }

    stages {

        stage('Preflight Check') {
            steps {
                echo "ðŸ§ª Running preflight checks..."
                sh "chmod +x scripts/preflight-check.sh"
                sh "./scripts/preflight-check.sh ${SERVICE_ENV_FILE}"
            }
        }

        stage('Build and Push Docker Image DEV') {
            when {
                branch 'dev'
            }
            steps {
                sh "chmod +x scripts/build-and-push.sh"
                sh "./scripts/build-and-push.sh ${SERVICE_ENV_FILE}"
            }
        }

        stage('Build and Push Docker Image QA') {
            when {
                branch 'qa'
            }
            steps {
                sh "chmod +x scripts/build-and-push.sh"
                sh "./scripts/build-and-push.sh ${SERVICE_ENV_FILE}"
                sh "chmod +x scripts/helm-package-push.sh"
                sh "./scripts/helm-package-push.sh ${SERVICE_ENV_FILE}"
                sh "chmod +x scripts/git-tag.sh"
                sh "./scripts/git-tag.sh ${SERVICE_ENV_FILE} ${GIT_COMMIT_SHORT}"
                sh "chmod +x scripts/github-release.sh"
                sh "./scripts/github-release.sh ${SERVICE_ENV_FILE} ${GIT_COMMIT_SHORT} qa"
            }
        }

        stage('Create GitHub Release MAIN') {
            when {
                branch 'main'
            }
            steps {
                sh "chmod +x scripts/github-release.sh"
                sh "./scripts/github-release.sh ${SERVICE_ENV_FILE} ${GIT_COMMIT_SHORT} main"
            }
        }

        stage('Build and Push Docker Image HOTFIX') {
            when {
                branch 'hotfix'
            }
            steps {
                sh "chmod +x scripts/build-and-push.sh"
                sh "./scripts/build-and-push.sh ${SERVICE_ENV_FILE}"
                sh "chmod +x scripts/helm-package-push.sh"
                sh "./scripts/helm-package-push.sh ${SERVICE_ENV_FILE}"
                sh "chmod +x scripts/github-release.sh"
                sh "./scripts/github-release.sh ${SERVICE_ENV_FILE} ${GIT_COMMIT_SHORT} hotfix"
            }
        }
    }

    post {
        always {
            echo 'ðŸ§¹ Cleaning workspace and sending email...'
            cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true)
            sh "chmod +x scripts/email-notification.sh"
            sh "./scripts/email-notification.sh ${JOB_NAME} ${BUILD_NUMBER} ${currentBuild.currentResult}"
        }
    }
}
