pipeline {
    agent { node { label 'docker-slave' } }
    options {
        disableConcurrentBuilds();
    }
    environment {

       IMAGE_NAME=sh( script: "echo ${env.JOB_NAME} | cut -d'/' -f1", returnStdout: true ).trim()
       GET_VERSION=sh(script: 'awk \'NF{line=$0} END{print line}\' ./version.txt', returnStdout: true).trim()

       DEV_IMAGE_TAG="${env.GET_VERSION}" + "-" +"${env.GIT_COMMIT}"
       QA_IMAGE_TAG="${env.GET_VERSION}"
       HOTFIX_IMAGE_TAG="${env.GET_VERSION}"

       QA_GITHUB_RELEASE_NAME="rc" + "-" + "${env.GET_VERSION}"
       MAIN_GITHUB_RELEASE_NAME="release" + "-" + "${env.GET_VERSION}"
       HOTFIX_GITHUB_RELEASE_NAME="${env.GET_VERSION}"

       GITHUB_API_WRITE_TOKEN = credentials('github-api-write-token')

       DEV_DOCKER_REPOSITORY="identitydesk.azurecr.io"
       DEV_HELM_REPOSITORY = "identitydesk.azurecr.io"
       QA_DOCKER_REPOSITORY="identitydesk.azurecr.io"
       QA_HELM_REPOSITORY = "identitydesk.azurecr.io"

       SONAR_ENABLED = "true"
       SONAR_URL = "http://10.180.8.165:9000"
       SONAR_TOKEN = credentials('sonar-token')

       DEV_SONAR_BRANCH = "dev"
       QA_SONAR_BRANCH = "qa"
       HOTFIX_SONAR_BRANCH = "hotfix"
    }

    stages {       
    //   stage('Build WAR') {
    //         when {
    //             expression {
    //                 env.BRANCH_NAME == 'dev' || env.BRANCH_NAME == 'release' || env.BRANCH_NAME == 'main'
    //             }
    //         }
    //         steps {
    //             //  build_war()
    //              echo "build war"                 
    //         }
    //        post {
    //        success {
    //           echo "Archving war artifact"
    //         //   archiveArtifacts artifacts: 'target/*.war', onlyIfSuccessful: true
    //        }
    //      }
    //   }      

      stage('Build and Push Docker Image DEV') {
            when {
                branch 'dev'
            }
            steps {
                echo "Push docker image"
                echo "DEV_IMAGE_TAG = $DEV_IMAGE_TAG"
                echo "Using DEV_IMAGE_TAG = $DEV_IMAGE_TAG for ${env.BRANCH_NAME}"
                gcloud_setup()
                docker_image_build_push(DEV_DOCKER_REPOSITORY, IMAGE_NAME, "${DEV_IMAGE_TAG}", "${DEV_SONAR_BRANCH}")
                helm_package_push(DEV_HELM_REPOSITORY, IMAGE_NAME, "${DEV_IMAGE_TAG}")
                echo "DEV_IMAGE_TAG = ${DEV_IMAGE_TAG}"
                dev_helm_update_image_tag("${DEV_IMAGE_TAG}")
        }
      }

      stage('Build and Push Docker Image QA') {
            when {
                branch 'qa'
            }
            steps {
                echo "Push docker image"
                echo "QA_IMAGE_TAG = ${QA_IMAGE_TAG}"
                echo "Using QA_IMAGE_TAG = ${QA_IMAGE_TAG} for ${env.BRANCH_NAME}"
                gcloud_setup()
                docker_image_build_push(QA_DOCKER_REPOSITORY, IMAGE_NAME, QA_IMAGE_TAG, "${QA_SONAR_BRANCH}")
                helm_package_push(QA_HELM_REPOSITORY, IMAGE_NAME, QA_IMAGE_TAG)
                echo "QA_IMAGE_TAG = ${QA_IMAGE_TAG}"
                create_git_tag("${QA_IMAGE_TAG}")
                create_github_release("${QA_IMAGE_TAG}","${QA_GITHUB_RELEASE_NAME}")
        }
      }

      stage('Create Github release MAIN') {
            when {
                branch 'main'
            }
            steps {
                echo "Using PROD_IMAGE_TAG = $QA_IMAGE_TAG for ${env.BRANCH_NAME}"
                echo "PROD_IMAGE_TAG = ${QA_IMAGE_TAG}"
                create_github_release("${QA_IMAGE_TAG}","${MAIN_GITHUB_RELEASE_NAME}")
        }
      }

      stage('Build and Push Docker Image HOTFIX') {
            when {
                branch 'hotfix'
            }
            steps {
                echo "Push docker image"
                echo "HOTFIX_IMAGE_TAG = $HOTFIX_IMAGE_TAG"
                echo "Using HOTFIX_IMAGE_TAG = $HOTFIX_IMAGE_TAG for ${env.BRANCH_NAME}"
                gcloud_setup()
                docker_image_build_push(QA_DOCKER_REPOSITORY, IMAGE_NAME, HOTFIX_IMAGE_TAG, "${HOTFIX_SONAR_BRANCH}")
                helm_package_push(QA_HELM_REPOSITORY, IMAGE_NAME, HOTFIX_IMAGE_TAG)
                echo "QA_IMAGE_TAG = ${HOTFIX_IMAGE_TAG}"
                create_github_release("${HOTFIX_IMAGE_TAG}","${HOTFIX_GITHUB_RELEASE_NAME}")
        }
      }
    }

    post { 
        always {
            // archiveArtifacts artifacts: 'target/*.war', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true 
            echo 'Cleaning Workspace and archiving war and sending email'
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true)
            email_notification()
        }
    }
}

// function to build war usig maven
// def build_war() {
//     echo "Branch : $BRANCH_NAME"
//     sh """
//     echo "Build WAR using Maven"
//     echo "PATH = ${PATH}"
//     echo "M2_HOME = ${M2_HOME}"
//     mvn --version
//     mvn clean install -DskipTests
//     """
// }

def email_notification() {
    emailext body: 'Please check the attached build log file',
        subject: '$JOB_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!',
        attachLog: 'true',
        compressLog: 'true',
        to: 'padmakar@gmail.com,pkotule@gslab.com'
}

// function to gcloud_setup
def gcloud_setup() {
    echo "Inside gcloud_setup funtion"
    sh """
    gcloud auth list
    gcloud config list
    gcloud auth configure-docker asia-docker.pkg.dev,asia-south1-docker.pkg.dev
    """
}

// function to build docker image
def docker_image_build_push(REPO_URI,IMAGE,TAG,SONAR_BRANCH) {
    echo "Inside docker_image_build_push funtion"
    echo "Artifact repo = $REPO_URI"
    echo "DOCKER IMAGE Name = $IMAGE"
    echo "DOCKER IMAGE TAG = $TAG"
    sh """
    export EXISTING_TAGS=\$(gcloud artifacts docker tags list ${REPO_URI}/${IMAGE} --format="value(tag)")
    echo \${EXISTING_TAGS}

    if echo "\${EXISTING_TAGS}" | grep -w "${TAG}"; then
        echo "Tag ${TAG} already exists."
        echo "Please ask developer to update version.txt"
        exit 1
    else
        echo "Tag ${TAG} does not exist."
        #git clone -b main git@github.com:<orgname>/common-helm-devops.git
        git clone -b main git@github.com:udemylab/common-helm-devops.git
        pwd;ls -lrt
        if echo "$JOB_NAME" | grep "upi"; then 
            docker build -t ${REPO_URI}/${IMAGE}:${TAG} -f common-helm-devops/common/common-jar-java11-dockerfile --build-arg SONAR_ENABLED="${SONAR_ENABLED}" --build-arg SONAR_URL="${SONAR_URL}" --build-arg SONAR_BRANCH="${SONAR_BRANCH}" --build-arg SONAR_TOKEN="${SONAR_TOKEN}" .
        else 
            docker build -t ${REPO_URI}/${IMAGE}:${TAG} -f common-helm-devops/common/common-war-java17-dockerfile --build-arg SONAR_ENABLED="${SONAR_ENABLED}" --build-arg SONAR_URL="${SONAR_URL}" --build-arg SONAR_BRANCH="${SONAR_BRANCH}" --build-arg SONAR_TOKEN="${SONAR_TOKEN}" .
        fi
        docker image ls
        docker push ${REPO_URI}/${IMAGE}:${TAG}
    fi
    """
}

def helm_package_push(REPO_URI,IMAGE,TAG) {
    echo "Inside helm_package_push funtion"
    sh """
    pwd;ls -lrt
    cd common-helm-devops/helmcharts/${IMAGE}
    helm package . --version ${TAG} --app-version ${TAG}
    helm push ${IMAGE}-${TAG}.tgz oci://${REPO_URI}
    """
}

// function to update docker iamge tag in helm values.yaml file
def dev_helm_update_image_tag(IMAGE_TAG)  {
    sh """
      echo "Update Docker image ${IMAGE_TAG} in helm_version.txt of helm-chart"
      git clone -b main git@github.com:udemylab/dev-env-tracking-devops.git
      pwd;ls -lrt
      cd dev-env-tracking-devops/${IMAGE_NAME}
      echo ${IMAGE_TAG} > helm_version.txt
      git config --global user.email "jenkins.test@gavstec.com"
      git config --global user.name "Jenkin-test"
      git add helm_version.txt
      git commit -m "Update version in helm_version.txt" || echo "already uptodate version"
      git push origin main || echo "already uptodate version"
    """
}

// function to create git tag
def create_git_tag(IMAGE_TAG)  {
    sh """
      echo "Create git tag ${IMAGE_TAG} in ${IMAGE_NAME} repository"
      pwd;ls -lrt
      git config --global user.email "jenkins.test@gavstech.com"
      git config --global user.name "Jenkin-test"
      git tag -a ${IMAGE_TAG} -m "add version tag for ${IMAGE_NAME}"
      git push origin ${IMAGE_TAG} -f
    """
}

// function to create git release
def create_github_release(IMAGE_TAG,GITHUB_RELEASE_NAME)  {
    sh """
      echo "Create github release ${GITHUB_RELEASE_NAME} in ${IMAGE_NAME} repository"
      pwd;ls -lrt

      export REPO_NAME=\$(echo "${env.GIT_URL}" | awk -F':' '{print \$2}' | sed 's/.git\$//g')
      GITHUB_API_URL="https://api.github.com/repos/\${REPO_NAME}/releases"
      echo "\${GITHUB_API_URL}"

      curl -L -X POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${GITHUB_API_WRITE_TOKEN}" "\${GITHUB_API_URL}" -d '{"tag_name":"${GITHUB_RELEASE_NAME}","target_commitish":"${env.GIT_COMMIT}","name":"${GITHUB_RELEASE_NAME}","body":"Description of the release ${GITHUB_RELEASE_NAME}","draft":false,"prerelease":false,"generate_release_notes":false}'
    """
}